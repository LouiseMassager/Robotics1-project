// generated from rosidl_adapter/resource/msg.idl.em
// with input from hrim_actuator_rotaryservo_msgs/msg/StateRotaryServo.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module hrim_actuator_rotaryservo_msgs {
  module msg {
    module StateRotaryServo_Constants {
      const uint8 FAULT_NONE = 0;
      const uint8 FAULT_CURRENT = 1;
      const uint8 FAULT_TEMPERATURE = 2;
      const uint8 FAULT_BUS_VOLTAGE = 3;
      const uint8 FAULT_BRIDGE_DRIVER = 4;
      const uint8 CONTROL_TYPE_NONE = 0;
      const uint8 CONTROL_TYPE_POSITION = 1;
      const uint8 CONTROL_TYPE_EFFORT = 2;
      const uint8 CONTROL_TYPE_VELOCITY = 3;
      const uint8 CONTROL_TYPE_POSITION_VELOCITY = 4;
      const uint8 CONTROL_TYPE_POSITION_EFFORT = 5;
      const uint8 CONTROL_TYPE_VELOCITY_EFFORT = 6;
      const uint8 CONTROL_TYPE_POSITION_VELOCITY_EFFORT = 7;
    };
    @verbatim (language="comment", text=
      " motor condition and the reason in case of error")
    struct StateRotaryServo {
      @verbatim (language="comment", text=
        " motor state is at this time")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        " commanded position")
      double goal;

      @verbatim (language="comment", text=
        " current position encoder")
      double position;

      @verbatim (language="comment", text=
        " difference between current and goal positions")
      double error;

      @verbatim (language="comment", text=
        " current velocity")
      double velocity;

      @verbatim (language="comment", text=
        " current effort of the actuator")
      double effort;

      @verbatim (language="comment", text=
        " load imposed on the motor")
      double load;

      @verbatim (language="comment", text=
        " whether the motor is currently in motion")
      boolean moving;

      @verbatim (language="comment", text=
        " fault cause")
      uint8 fault;

      @verbatim (language="comment", text=
        " rotary servomotor control type")
      uint8 control_type;
    };
  };
};
